
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000522  000005b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000522  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800102  00800102  000005b8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000b7  00000000  00000000  00000d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001f5  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000e1  00000000  00000000  00000fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003b7  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000060  00000000  00000000  00001470  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000011b  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000032f  00000000  00000000  000015eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000001e  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e2       	ldi	r30, 0x22	; 34
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 c0 01 	call	0x380	; 0x380 <main>
  c6:	0c 94 8f 02 	jmp	0x51e	; 0x51e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <check_reservation_flag>:

void check_reservation_flag()
{
	int i;

	for(i=0; i<=7; i++)
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(PIND & (0x01>>i))
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	60 b3       	in	r22, 0x10	; 16
  d8:	9a 01       	movw	r18, r20
  da:	08 2e       	mov	r0, r24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <check_reservation_flag+0x14>
  de:	35 95       	asr	r19
  e0:	27 95       	ror	r18
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <check_reservation_flag+0x10>
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	26 23       	and	r18, r22
  ea:	37 23       	and	r19, r23
  ec:	21 15       	cp	r18, r1
  ee:	31 05       	cpc	r19, r1
  f0:	61 f0       	breq	.+24     	; 0x10a <check_reservation_flag+0x3c>
		{
			reservation_flag = reservation_flag | (0x01 << i);
  f2:	60 91 02 01 	lds	r22, 0x0102
  f6:	9a 01       	movw	r18, r20
  f8:	08 2e       	mov	r0, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <check_reservation_flag+0x32>
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <check_reservation_flag+0x2e>
 104:	62 2b       	or	r22, r18
 106:	60 93 02 01 	sts	0x0102, r22

void check_reservation_flag()
{
	int i;

	for(i=0; i<=7; i++)
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	88 30       	cpi	r24, 0x08	; 8
 10e:	91 05       	cpc	r25, r1
 110:	11 f7       	brne	.-60     	; 0xd6 <check_reservation_flag+0x8>
		if(PIND & (0x01>>i))
		{
			reservation_flag = reservation_flag | (0x01 << i);
		}
	}
}
 112:	08 95       	ret

00000114 <up_down_flag_func>:
void up_down_flag_func()
{
	int i, cnt, num1, num2;
	int now_position_bit;

	cnt = 0;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
	now_position_bit = 0;
	num1 = 0;
	num2 = 0;

	
	for(i=0; i<=7; i++)
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(reservation_flag & (0x01 >> i))
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	e0 91 02 01 	lds	r30, 0x0102
 124:	ab 01       	movw	r20, r22
 126:	02 2e       	mov	r0, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <up_down_flag_func+0x1a>
 12a:	55 95       	asr	r21
 12c:	47 95       	ror	r20
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <up_down_flag_func+0x16>
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	4e 23       	and	r20, r30
 136:	5f 23       	and	r21, r31
 138:	41 15       	cp	r20, r1
 13a:	51 05       	cpc	r21, r1
 13c:	09 f0       	breq	.+2      	; 0x140 <up_down_flag_func+0x2c>
		{
			cnt++;
 13e:	01 96       	adiw	r24, 0x01	; 1
	now_position_bit = 0;
	num1 = 0;
	num2 = 0;

	
	for(i=0; i<=7; i++)
 140:	2f 5f       	subi	r18, 0xFF	; 255
 142:	3f 4f       	sbci	r19, 0xFF	; 255
 144:	28 30       	cpi	r18, 0x08	; 8
 146:	31 05       	cpc	r19, r1
 148:	59 f7       	brne	.-42     	; 0x120 <up_down_flag_func+0xc>
		{
			cnt++;
		}
	}

	if(cnt == 1)
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	91 05       	cpc	r25, r1
 14e:	99 f4       	brne	.+38     	; 0x176 <up_down_flag_func+0x62>
	{
		if(now_position > reservation_flag)
 150:	90 91 00 01 	lds	r25, 0x0100
 154:	80 91 02 01 	lds	r24, 0x0102
 158:	89 17       	cp	r24, r25
 15a:	08 f4       	brcc	.+2      	; 0x15e <up_down_flag_func+0x4a>
 15c:	a3 c0       	rjmp	.+326    	; 0x2a4 <up_down_flag_func+0x190>
		{
			up_down_flag = 2;
		}
		else if(now_position < reservation_flag)
 15e:	90 91 00 01 	lds	r25, 0x0100
 162:	80 91 02 01 	lds	r24, 0x0102
 166:	98 17       	cp	r25, r24
 168:	08 f4       	brcc	.+2      	; 0x16c <up_down_flag_func+0x58>
 16a:	97 c0       	rjmp	.+302    	; 0x29a <up_down_flag_func+0x186>
		{
			up_down_flag = 1;
		}
		else if(now_position == reservation_flag)
 16c:	90 91 00 01 	lds	r25, 0x0100
 170:	80 91 02 01 	lds	r24, 0x0102
 174:	9b c0       	rjmp	.+310    	; 0x2ac <up_down_flag_func+0x198>
		else
		{
			up_down_flag = 0;
		}
	}
	else if(cnt >=2)
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	91 05       	cpc	r25, r1
 17a:	0c f4       	brge	.+2      	; 0x17e <up_down_flag_func+0x6a>
 17c:	9a c0       	rjmp	.+308    	; 0x2b2 <up_down_flag_func+0x19e>
	{
		if(up_down_flag == 2)
 17e:	80 91 03 01 	lds	r24, 0x0103
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	09 f0       	breq	.+2      	; 0x188 <up_down_flag_func+0x74>
 186:	45 c0       	rjmp	.+138    	; 0x212 <up_down_flag_func+0xfe>
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
		{
	 		// ÇØ´ç Ãþ °Ë»ö.
			for(i=0; i<=7; i++)
			{
				if(now_position & (0x1 << i))
 190:	40 91 00 01 	lds	r20, 0x0100
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	02 2e       	mov	r0, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <up_down_flag_func+0x8a>
 19a:	55 95       	asr	r21
 19c:	47 95       	ror	r20
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <up_down_flag_func+0x86>
 1a2:	40 fd       	sbrc	r20, 0
 1a4:	c9 01       	movw	r24, r18
	else if(cnt >=2)
	{
		if(up_down_flag == 2)
		{
	 		// ÇØ´ç Ãþ °Ë»ö.
			for(i=0; i<=7; i++)
 1a6:	2f 5f       	subi	r18, 0xFF	; 255
 1a8:	3f 4f       	sbci	r19, 0xFF	; 255
 1aa:	28 30       	cpi	r18, 0x08	; 8
 1ac:	31 05       	cpc	r19, r1
 1ae:	81 f7       	brne	.-32     	; 0x190 <up_down_flag_func+0x7c>
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	0d c0       	rjmp	.+26     	; 0x1d4 <up_down_flag_func+0xc0>

			// ÇØ´ç Ãþº¸´Ù ¾Æ·¡¿¡  reservation_flag bit°¡ Á¸ÀçÇÏ´ÂÁö È®ÀÎ
			
			for(i=0; i<now_position_bit; i++)
			{
				if(now_position & (0x1 << i))
 1ba:	40 91 00 01 	lds	r20, 0x0100
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	02 2e       	mov	r0, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <up_down_flag_func+0xb4>
 1c4:	55 95       	asr	r21
 1c6:	47 95       	ror	r20
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <up_down_flag_func+0xb0>
 1cc:	40 fd       	sbrc	r20, 0
 1ce:	b9 01       	movw	r22, r18
				}
			}

			// ÇØ´ç Ãþº¸´Ù ¾Æ·¡¿¡  reservation_flag bit°¡ Á¸ÀçÇÏ´ÂÁö È®ÀÎ
			
			for(i=0; i<now_position_bit; i++)
 1d0:	2f 5f       	subi	r18, 0xFF	; 255
 1d2:	3f 4f       	sbci	r19, 0xFF	; 255
 1d4:	28 17       	cp	r18, r24
 1d6:	39 07       	cpc	r19, r25
 1d8:	84 f3       	brlt	.-32     	; 0x1ba <up_down_flag_func+0xa6>
				}
			}

			// ÇØ´ç Ãþº¸´Ù À§¿¡  reservation_flag bit°¡ Á¸ÀçÇÏ´ÂÁö È®ÀÎ
			
			for(i=now_position_bit+1; i<=7; i++)
 1da:	01 96       	adiw	r24, 0x01	; 1
	int now_position_bit;

	cnt = 0;
	now_position_bit = 0;
	num1 = 0;
	num2 = 0;
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	50 e0       	ldi	r21, 0x00	; 0
				}
			}

			// ÇØ´ç Ãþº¸´Ù À§¿¡  reservation_flag bit°¡ Á¸ÀçÇÏ´ÂÁö È®ÀÎ
			
			for(i=now_position_bit+1; i<=7; i++)
 1e0:	0c c0       	rjmp	.+24     	; 0x1fa <up_down_flag_func+0xe6>
			{
				if(now_position & (0x1 << i))
 1e2:	20 91 00 01 	lds	r18, 0x0100
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	08 2e       	mov	r0, r24
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <up_down_flag_func+0xdc>
 1ec:	35 95       	asr	r19
 1ee:	27 95       	ror	r18
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <up_down_flag_func+0xd8>
 1f4:	20 fd       	sbrc	r18, 0
 1f6:	ac 01       	movw	r20, r24
				}
			}

			// ÇØ´ç Ãþº¸´Ù À§¿¡  reservation_flag bit°¡ Á¸ÀçÇÏ´ÂÁö È®ÀÎ
			
			for(i=now_position_bit+1; i<=7; i++)
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	88 30       	cpi	r24, 0x08	; 8
 1fc:	91 05       	cpc	r25, r1
 1fe:	8c f3       	brlt	.-30     	; 0x1e2 <up_down_flag_func+0xce>
				{
					num2 = i;
				}
			}

			if(num1 != 0)
 200:	61 15       	cp	r22, r1
 202:	71 05       	cpc	r23, r1
 204:	09 f0       	breq	.+2      	; 0x208 <up_down_flag_func+0xf4>
 206:	4e c0       	rjmp	.+156    	; 0x2a4 <up_down_flag_func+0x190>
			{
				up_down_flag = 2;
			}
			else if(num2 != 0)
 208:	41 15       	cp	r20, r1
 20a:	51 05       	cpc	r21, r1
 20c:	09 f4       	brne	.+2      	; 0x210 <up_down_flag_func+0xfc>
 20e:	4e c0       	rjmp	.+156    	; 0x2ac <up_down_flag_func+0x198>
 210:	44 c0       	rjmp	.+136    	; 0x29a <up_down_flag_func+0x186>
			{
				up_down_flag = 0;
			}
		}

		else if(up_down_flag == 1)
 212:	80 91 03 01 	lds	r24, 0x0103
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	09 f0       	breq	.+2      	; 0x21c <up_down_flag_func+0x108>
 21a:	4d c0       	rjmp	.+154    	; 0x2b6 <up_down_flag_func+0x1a2>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
		{
			// ÇØ´ç Ãþ °Ë»ö.
			for(i=0; i<=7; i++)
			{
				if(now_position & (0x1 << i))
 224:	40 91 00 01 	lds	r20, 0x0100
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	02 2e       	mov	r0, r18
 22c:	02 c0       	rjmp	.+4      	; 0x232 <up_down_flag_func+0x11e>
 22e:	55 95       	asr	r21
 230:	47 95       	ror	r20
 232:	0a 94       	dec	r0
 234:	e2 f7       	brpl	.-8      	; 0x22e <up_down_flag_func+0x11a>
 236:	40 fd       	sbrc	r20, 0
 238:	c9 01       	movw	r24, r18
		}

		else if(up_down_flag == 1)
		{
			// ÇØ´ç Ãþ °Ë»ö.
			for(i=0; i<=7; i++)
 23a:	2f 5f       	subi	r18, 0xFF	; 255
 23c:	3f 4f       	sbci	r19, 0xFF	; 255
 23e:	28 30       	cpi	r18, 0x08	; 8
 240:	31 05       	cpc	r19, r1
 242:	81 f7       	brne	.-32     	; 0x224 <up_down_flag_func+0x110>
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	0d c0       	rjmp	.+26     	; 0x268 <up_down_flag_func+0x154>

			// ÇØ´ç Ãþº¸´Ù ¾Æ·¡¿¡  reservation_flag bit°¡ Á¸ÀçÇÏ´ÂÁö È®ÀÎ
			
			for(i=0; i<now_position_bit; i++)
			{
				if(now_position & (0x1 << i))
 24e:	40 91 00 01 	lds	r20, 0x0100
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	02 2e       	mov	r0, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <up_down_flag_func+0x148>
 258:	55 95       	asr	r21
 25a:	47 95       	ror	r20
 25c:	0a 94       	dec	r0
 25e:	e2 f7       	brpl	.-8      	; 0x258 <up_down_flag_func+0x144>
 260:	40 fd       	sbrc	r20, 0
 262:	b9 01       	movw	r22, r18
				}
			}

			// ÇØ´ç Ãþº¸´Ù ¾Æ·¡¿¡  reservation_flag bit°¡ Á¸ÀçÇÏ´ÂÁö È®ÀÎ
			
			for(i=0; i<now_position_bit; i++)
 264:	2f 5f       	subi	r18, 0xFF	; 255
 266:	3f 4f       	sbci	r19, 0xFF	; 255
 268:	28 17       	cp	r18, r24
 26a:	39 07       	cpc	r19, r25
 26c:	84 f3       	brlt	.-32     	; 0x24e <up_down_flag_func+0x13a>
				}
			}

			// ÇØ´ç Ãþº¸´Ù À§¿¡  reservation_flag bit°¡ Á¸ÀçÇÏ´ÂÁö È®ÀÎ
			
			for(i=now_position_bit+1; i<=7; i++)
 26e:	01 96       	adiw	r24, 0x01	; 1
	int now_position_bit;

	cnt = 0;
	now_position_bit = 0;
	num1 = 0;
	num2 = 0;
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	50 e0       	ldi	r21, 0x00	; 0
				}
			}

			// ÇØ´ç Ãþº¸´Ù À§¿¡  reservation_flag bit°¡ Á¸ÀçÇÏ´ÂÁö È®ÀÎ
			
			for(i=now_position_bit+1; i<=7; i++)
 274:	0c c0       	rjmp	.+24     	; 0x28e <up_down_flag_func+0x17a>
			{
				if(now_position & (0x1 << i))
 276:	20 91 00 01 	lds	r18, 0x0100
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	08 2e       	mov	r0, r24
 27e:	02 c0       	rjmp	.+4      	; 0x284 <up_down_flag_func+0x170>
 280:	35 95       	asr	r19
 282:	27 95       	ror	r18
 284:	0a 94       	dec	r0
 286:	e2 f7       	brpl	.-8      	; 0x280 <up_down_flag_func+0x16c>
 288:	20 fd       	sbrc	r18, 0
 28a:	ac 01       	movw	r20, r24
				}
			}

			// ÇØ´ç Ãþº¸´Ù À§¿¡  reservation_flag bit°¡ Á¸ÀçÇÏ´ÂÁö È®ÀÎ
			
			for(i=now_position_bit+1; i<=7; i++)
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	88 30       	cpi	r24, 0x08	; 8
 290:	91 05       	cpc	r25, r1
 292:	8c f3       	brlt	.-30     	; 0x276 <up_down_flag_func+0x162>
				{
					num2 = i;
				}
			}

			if(num1 != 0)
 294:	61 15       	cp	r22, r1
 296:	71 05       	cpc	r23, r1
 298:	11 f0       	breq	.+4      	; 0x29e <up_down_flag_func+0x18a>
			{
				up_down_flag = 1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	04 c0       	rjmp	.+8      	; 0x2a6 <up_down_flag_func+0x192>
			}
			else if(num2 != 0)
 29e:	41 15       	cp	r20, r1
 2a0:	51 05       	cpc	r21, r1
 2a2:	21 f0       	breq	.+8      	; 0x2ac <up_down_flag_func+0x198>
			{
				up_down_flag = 2; 
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	80 93 03 01 	sts	0x0103, r24
 2aa:	08 95       	ret
			}
			else
			{
				up_down_flag = 0;
 2ac:	10 92 03 01 	sts	0x0103, r1
 2b0:	08 95       	ret
		}

	}
	else	// ¿¹¾àÀÌ ¾øÀ½ => up_down_flag = 0;
	{
		up_down_flag = 0;
 2b2:	10 92 03 01 	sts	0x0103, r1
 2b6:	08 95       	ret

000002b8 <count_func>:
}

void count_func()
{

	if(reservation_flag != 0x00 && timer0 / 244 == 0)
 2b8:	80 91 02 01 	lds	r24, 0x0102
 2bc:	88 23       	and	r24, r24
 2be:	01 f1       	breq	.+64     	; 0x300 <count_func+0x48>
 2c0:	80 91 04 01 	lds	r24, 0x0104
 2c4:	90 91 05 01 	lds	r25, 0x0105
 2c8:	a0 91 06 01 	lds	r26, 0x0106
 2cc:	b0 91 07 01 	lds	r27, 0x0107
 2d0:	84 3f       	cpi	r24, 0xF4	; 244
 2d2:	91 05       	cpc	r25, r1
 2d4:	a1 05       	cpc	r26, r1
 2d6:	b1 05       	cpc	r27, r1
 2d8:	98 f4       	brcc	.+38     	; 0x300 <count_func+0x48>
	{
		count++;
 2da:	80 91 08 01 	lds	r24, 0x0108
 2de:	90 91 09 01 	lds	r25, 0x0109
 2e2:	a0 91 0a 01 	lds	r26, 0x010A
 2e6:	b0 91 0b 01 	lds	r27, 0x010B
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	a1 1d       	adc	r26, r1
 2ee:	b1 1d       	adc	r27, r1
 2f0:	80 93 08 01 	sts	0x0108, r24
 2f4:	90 93 09 01 	sts	0x0109, r25
 2f8:	a0 93 0a 01 	sts	0x010A, r26
 2fc:	b0 93 0b 01 	sts	0x010B, r27
 300:	08 95       	ret

00000302 <__vector_16>:
void check_reservation_flag();
void up_down_flag_func();
void count_func();

ISR(TIMER0_OVF_vect)
{
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	0b b6       	in	r0, 0x3b	; 59
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	2f 93       	push	r18
 312:	3f 93       	push	r19
 314:	4f 93       	push	r20
 316:	5f 93       	push	r21
 318:	6f 93       	push	r22
 31a:	7f 93       	push	r23
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
 320:	af 93       	push	r26
 322:	bf 93       	push	r27
 324:	ef 93       	push	r30
 326:	ff 93       	push	r31
	// timer/counter0 overflow interrupt´Â ºÐÁÖºñ¸¦ 256À¸·Î ÇßÀ¸¹Ç·Î, 16MHz / 256*256
	// 256 : 8bit ¹üÀ§
	// 256 : freescale ¹üÀ§
	timer0++;
 328:	80 91 04 01 	lds	r24, 0x0104
 32c:	90 91 05 01 	lds	r25, 0x0105
 330:	a0 91 06 01 	lds	r26, 0x0106
 334:	b0 91 07 01 	lds	r27, 0x0107
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	a1 1d       	adc	r26, r1
 33c:	b1 1d       	adc	r27, r1
 33e:	80 93 04 01 	sts	0x0104, r24
 342:	90 93 05 01 	sts	0x0105, r25
 346:	a0 93 06 01 	sts	0x0106, r26
 34a:	b0 93 07 01 	sts	0x0107, r27

	// ¿©±â¿¡ ½ºÀ§Ä¡ ÀÔ·ÂÀ» ¹Þ¾Æ reservation_flag °ªÀ» ¹Ù²ãÁÖ´Â ÇÔ¼ö¸¦ ³Ö¾îÁØ´Ù.
	check_reservation_flag();
 34e:	0e 94 67 00 	call	0xce	; 0xce <check_reservation_flag>
	
	// ¿©±â¿¡ up_down_flag¸¦ Á¶Á¤ÇÏ´Â ÇÔ¼ö¸¦ ³Ö¾îÁØ´Ù.
	up_down_flag_func();
 352:	0e 94 8a 00 	call	0x114	; 0x114 <up_down_flag_func>

	// ¿©±â¿¡ now_position °ª°ú reservation_flagÀÇ Æ¯Á¤ºñÆ®¿Í °°ÀºÁö ¾Æ´ÑÁö ºñ±³ÇÏ¿© °°À¸¸é count¸¦ 3±îÁö ¼¼°Ô ÇÏ°í, ´Ù¸£¸é count¸¦ 1¸¸ ¼¼°Ô ÇÑ´Ù.
	count_func();
 356:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <count_func>
	

}
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0b be       	out	0x3b, r0	; 59
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <main>:

int main(void)
{
    unsigned char i, now_position_bit;

    DDRA=0xFF;
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	8a bb       	out	0x1a, r24	; 26
    DDRD=0x00;
 384:	11 ba       	out	0x11, r1	; 17

    TIMSK |= 1<<TOIE0;			// Timer/Counter0 interrupt È°¼ºÈ­
 386:	87 b7       	in	r24, 0x37	; 55
 388:	81 60       	ori	r24, 0x01	; 1
 38a:	87 bf       	out	0x37, r24	; 55
    TCCR0 |= 1<<CS02 | 1<<CS01;		// freescaler (1,1,0) 256 ºÐÁÖ
 38c:	83 b7       	in	r24, 0x33	; 51
 38e:	86 60       	ori	r24, 0x06	; 6
 390:	83 bf       	out	0x33, r24	; 51

    PORTA=now_position;			// LED0 ON ÃÊ±â°ª
 392:	80 91 00 01 	lds	r24, 0x0100
 396:	8b bb       	out	0x1b, r24	; 27

    timer0 = 0;
 398:	10 92 04 01 	sts	0x0104, r1
 39c:	10 92 05 01 	sts	0x0105, r1
 3a0:	10 92 06 01 	sts	0x0106, r1
 3a4:	10 92 07 01 	sts	0x0107, r1
    now_position_bit = 0;
    sei();
 3a8:	78 94       	sei
    TCCR0 |= 1<<CS02 | 1<<CS01;		// freescaler (1,1,0) 256 ºÐÁÖ

    PORTA=now_position;			// LED0 ON ÃÊ±â°ª

    timer0 = 0;
    now_position_bit = 0;
 3aa:	60 e0       	ldi	r22, 0x00	; 0
							{
								now_position_bit = i;
							}
						}
						// ÇØ´çÃþÀ» Áö³ª°¥ °ÍÀÌ¹Ç·Î, flag ºñÆ®¸¦ 0·Î clear
						reservation_flag &= ~(0x1 << now_position_bit);
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	30 e0       	ldi	r19, 0x00	; 0
    now_position_bit = 0;
    sei();

    while(1)
    {
	    if(reservation_flag != 0x00)	// reservation_flag°¡ ÀÖÀ»½Ã
 3b0:	80 91 02 01 	lds	r24, 0x0102
 3b4:	88 23       	and	r24, r24
 3b6:	09 f4       	brne	.+2      	; 0x3ba <main+0x3a>
 3b8:	a9 c0       	rjmp	.+338    	; 0x50c <main+0x18c>
	    {	    
				if((now_position & reservation_flag) == now_position)
 3ba:	40 91 00 01 	lds	r20, 0x0100
 3be:	80 91 02 01 	lds	r24, 0x0102
 3c2:	90 91 00 01 	lds	r25, 0x0100
 3c6:	84 23       	and	r24, r20
 3c8:	89 17       	cp	r24, r25
 3ca:	09 f0       	breq	.+2      	; 0x3ce <main+0x4e>
 3cc:	72 c0       	rjmp	.+228    	; 0x4b2 <main+0x132>
				{	
// count°ª°ú up_down_flag¸¦ ºñ±³ÇÏ¿© LEDÀÇ Á¡µîÁ¡¸êÀ» °á°ú·Î Ãâ·ÂÇÏ°Ô²û ÇÑ´Ù.
// ÇØ´ç Ãþ¿¡ 3ÃÊ ¸ØÃçÀÖÀº ÈÄ, ÀÌµ¿ÇÏ°Ô µÇ´Â ¼ø°£¿¡ reservation_flag¸¦ 0·Î º¯°æÇØ ÁÖ¾î¾ß ÇÑ´Ù.		    	
				    	if(count == 3 && up_down_flag == 1)	
 3ce:	80 91 08 01 	lds	r24, 0x0108
 3d2:	90 91 09 01 	lds	r25, 0x0109
 3d6:	a0 91 0a 01 	lds	r26, 0x010A
 3da:	b0 91 0b 01 	lds	r27, 0x010B
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	91 05       	cpc	r25, r1
 3e2:	a1 05       	cpc	r26, r1
 3e4:	b1 05       	cpc	r27, r1
 3e6:	19 f5       	brne	.+70     	; 0x42e <main+0xae>
 3e8:	80 91 03 01 	lds	r24, 0x0103
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	f9 f4       	brne	.+62     	; 0x42e <main+0xae>
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
				   	 {
						 // ÇØ´ç Ãþ °Ë»ö.
						for(i=0; i<=7; i++)
						{
							if(now_position & (0x1 << i))
 3f4:	40 91 00 01 	lds	r20, 0x0100
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	08 2e       	mov	r0, r24
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <main+0x82>
 3fe:	55 95       	asr	r21
 400:	47 95       	ror	r20
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <main+0x7e>
 406:	40 fd       	sbrc	r20, 0
 408:	68 2f       	mov	r22, r24
 40a:	01 96       	adiw	r24, 0x01	; 1
// count°ª°ú up_down_flag¸¦ ºñ±³ÇÏ¿© LEDÀÇ Á¡µîÁ¡¸êÀ» °á°ú·Î Ãâ·ÂÇÏ°Ô²û ÇÑ´Ù.
// ÇØ´ç Ãþ¿¡ 3ÃÊ ¸ØÃçÀÖÀº ÈÄ, ÀÌµ¿ÇÏ°Ô µÇ´Â ¼ø°£¿¡ reservation_flag¸¦ 0·Î º¯°æÇØ ÁÖ¾î¾ß ÇÑ´Ù.		    	
				    	if(count == 3 && up_down_flag == 1)	
				   	 {
						 // ÇØ´ç Ãþ °Ë»ö.
						for(i=0; i<=7; i++)
 40c:	88 30       	cpi	r24, 0x08	; 8
 40e:	91 05       	cpc	r25, r1
 410:	89 f7       	brne	.-30     	; 0x3f4 <main+0x74>
							{
								now_position_bit = i;
							}
						}
						// ÇØ´çÃþÀ» Áö³ª°¥ °ÍÀÌ¹Ç·Î, flag ºñÆ®¸¦ 0·Î clear
						reservation_flag &= ~(0x1 << now_position_bit);
 412:	40 91 02 01 	lds	r20, 0x0102
 416:	c9 01       	movw	r24, r18
 418:	06 2e       	mov	r0, r22
 41a:	02 c0       	rjmp	.+4      	; 0x420 <main+0xa0>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <main+0x9c>
 424:	80 95       	com	r24
 426:	84 23       	and	r24, r20
 428:	80 93 02 01 	sts	0x0102, r24
 42c:	59 c0       	rjmp	.+178    	; 0x4e0 <main+0x160>
						now_position = now_position << 1;
						PORTA = now_position;
						count = 0;
				    	}

				    	else if(count == 3 && up_down_flag == 2)
 42e:	80 91 08 01 	lds	r24, 0x0108
 432:	90 91 09 01 	lds	r25, 0x0109
 436:	a0 91 0a 01 	lds	r26, 0x010A
 43a:	b0 91 0b 01 	lds	r27, 0x010B
 43e:	83 30       	cpi	r24, 0x03	; 3
 440:	91 05       	cpc	r25, r1
 442:	a1 05       	cpc	r26, r1
 444:	b1 05       	cpc	r27, r1
 446:	09 f0       	breq	.+2      	; 0x44a <main+0xca>
 448:	66 c0       	rjmp	.+204    	; 0x516 <main+0x196>
 44a:	80 91 03 01 	lds	r24, 0x0103
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	09 f0       	breq	.+2      	; 0x454 <main+0xd4>
 452:	61 c0       	rjmp	.+194    	; 0x516 <main+0x196>
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
				    	{
						 // ÇØ´ç Ãþ °Ë»ö.
						for(i=0; i<=7; i++)
						{
							if(now_position & (0x1 << i))
 458:	40 91 00 01 	lds	r20, 0x0100
 45c:	50 e0       	ldi	r21, 0x00	; 0
 45e:	08 2e       	mov	r0, r24
 460:	02 c0       	rjmp	.+4      	; 0x466 <main+0xe6>
 462:	55 95       	asr	r21
 464:	47 95       	ror	r20
 466:	0a 94       	dec	r0
 468:	e2 f7       	brpl	.-8      	; 0x462 <main+0xe2>
 46a:	40 fd       	sbrc	r20, 0
 46c:	68 2f       	mov	r22, r24
 46e:	01 96       	adiw	r24, 0x01	; 1
				    	}

				    	else if(count == 3 && up_down_flag == 2)
				    	{
						 // ÇØ´ç Ãþ °Ë»ö.
						for(i=0; i<=7; i++)
 470:	88 30       	cpi	r24, 0x08	; 8
 472:	91 05       	cpc	r25, r1
 474:	89 f7       	brne	.-30     	; 0x458 <main+0xd8>
							{
								now_position_bit = i;
							}
						}
						// ÇØ´çÃþÀ» Áö³ª°¥ °ÍÀÌ¹Ç·Î, flag ºñÆ®¸¦ 0·Î clear
						reservation_flag &= ~(0x1 << now_position_bit);
 476:	40 91 02 01 	lds	r20, 0x0102
 47a:	c9 01       	movw	r24, r18
 47c:	06 2e       	mov	r0, r22
 47e:	02 c0       	rjmp	.+4      	; 0x484 <main+0x104>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	0a 94       	dec	r0
 486:	e2 f7       	brpl	.-8      	; 0x480 <main+0x100>
 488:	80 95       	com	r24
 48a:	84 23       	and	r24, r20
 48c:	80 93 02 01 	sts	0x0102, r24
						now_position = now_position >> 1;
 490:	80 91 00 01 	lds	r24, 0x0100
 494:	86 95       	lsr	r24
 496:	80 93 00 01 	sts	0x0100, r24
						PORTA = now_position;
 49a:	80 91 00 01 	lds	r24, 0x0100
 49e:	8b bb       	out	0x1b, r24	; 27
						count = 0;
 4a0:	10 92 08 01 	sts	0x0108, r1
 4a4:	10 92 09 01 	sts	0x0109, r1
 4a8:	10 92 0a 01 	sts	0x010A, r1
 4ac:	10 92 0b 01 	sts	0x010B, r1
 4b0:	7f cf       	rjmp	.-258    	; 0x3b0 <main+0x30>
				    	{
						PORTA = now_position;
				    	}
				}
				
				else if ((now_position & reservation_flag) == 0x00)
 4b2:	90 91 00 01 	lds	r25, 0x0100
 4b6:	80 91 02 01 	lds	r24, 0x0102
 4ba:	89 23       	and	r24, r25
 4bc:	61 f5       	brne	.+88     	; 0x516 <main+0x196>
				{	
					// ÇöÀç position¿¡ flag°¡ ¾ø´Ù.
// count°ª°ú up_down_flag¸¦ ºñ±³ÇÏ¿© LEDÀÇ Á¡µîÁ¡¸êÀ» °á°ú·Î Ãâ·ÂÇÏ°Ô²û ÇÑ´Ù.				
				
					if(count == 1 && up_down_flag == 1)	
 4be:	80 91 08 01 	lds	r24, 0x0108
 4c2:	90 91 09 01 	lds	r25, 0x0109
 4c6:	a0 91 0a 01 	lds	r26, 0x010A
 4ca:	b0 91 0b 01 	lds	r27, 0x010B
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	91 05       	cpc	r25, r1
 4d2:	a1 05       	cpc	r26, r1
 4d4:	b1 05       	cpc	r27, r1
 4d6:	41 f4       	brne	.+16     	; 0x4e8 <main+0x168>
 4d8:	80 91 03 01 	lds	r24, 0x0103
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	21 f4       	brne	.+8      	; 0x4e8 <main+0x168>
					{
						now_position = now_position << 1;
 4e0:	80 91 00 01 	lds	r24, 0x0100
 4e4:	88 0f       	add	r24, r24
 4e6:	d7 cf       	rjmp	.-82     	; 0x496 <main+0x116>
						PORTA = now_position;
						count = 0;
					}
					else if(count == 1 && up_down_flag == 2)
 4e8:	80 91 08 01 	lds	r24, 0x0108
 4ec:	90 91 09 01 	lds	r25, 0x0109
 4f0:	a0 91 0a 01 	lds	r26, 0x010A
 4f4:	b0 91 0b 01 	lds	r27, 0x010B
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	91 05       	cpc	r25, r1
 4fc:	a1 05       	cpc	r26, r1
 4fe:	b1 05       	cpc	r27, r1
 500:	51 f4       	brne	.+20     	; 0x516 <main+0x196>
 502:	80 91 03 01 	lds	r24, 0x0103
 506:	82 30       	cpi	r24, 0x02	; 2
 508:	31 f4       	brne	.+12     	; 0x516 <main+0x196>
 50a:	c2 cf       	rjmp	.-124    	; 0x490 <main+0x110>
				else 
				{
					PORTA = now_position;
				}	 
	    }
	    else if(reservation_flag == 0x00)	// reservation_flag°¡ ¾øÀ»½Ã
 50c:	80 91 02 01 	lds	r24, 0x0102
 510:	88 23       	and	r24, r24
 512:	09 f0       	breq	.+2      	; 0x516 <main+0x196>
 514:	4d cf       	rjmp	.-358    	; 0x3b0 <main+0x30>
	    {
		    PORTA = now_position;
 516:	80 91 00 01 	lds	r24, 0x0100
 51a:	8b bb       	out	0x1b, r24	; 27
 51c:	49 cf       	rjmp	.-366    	; 0x3b0 <main+0x30>

0000051e <_exit>:
 51e:	f8 94       	cli

00000520 <__stop_program>:
 520:	ff cf       	rjmp	.-2      	; 0x520 <__stop_program>
