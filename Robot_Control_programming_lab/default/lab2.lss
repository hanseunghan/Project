
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000232  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000009d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000057  00000000  00000000  000009f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000295  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000152  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e7  00000000  00000000  00000e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000150  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022f  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  000014ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  9c:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <initialize_PORT>:
}


void initialize_PORT()
{
	DDRA = 0xFF;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  a8:	87 bb       	out	0x17, r24	; 23
	
	DDRD = 0x7E; // 0111_1110, only input PD7, PD0 
  aa:	8e e7       	ldi	r24, 0x7E	; 126
  ac:	81 bb       	out	0x11, r24	; 17

	PORTA = 0x00;
  ae:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0x00;
  b0:	18 ba       	out	0x18, r1	; 24
}
  b2:	08 95       	ret

000000b4 <initialize_TIMER0_PWM>:

void initialize_TIMER0_PWM()
{
	TCCR0 = PWM_MODE | FAST_PWM_MODE | OUTPUT_LOW_ON_COMPARE_MATCH | PRESCALE_1024;
  b4:	8f e6       	ldi	r24, 0x6F	; 111
  b6:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
  b8:	12 be       	out	0x32, r1	; 50
}
  ba:	08 95       	ret

000000bc <pulse_out>:

void pulse_out(unsigned char duty_Ratio)
{
	PORTB = CCW_ROTATION;		// After PD7 SW is pressed, Operation by SW0 should be output as CCW_Rotation.
  bc:	90 ea       	ldi	r25, 0xA0	; 160
  be:	98 bb       	out	0x18, r25	; 24
	OCR0 = duty_Ratio;
  c0:	81 bf       	out	0x31, r24	; 49
	PORTA = duty_Ratio;
  c2:	8b bb       	out	0x1b, r24	; 27
}
  c4:	08 95       	ret

000000c6 <main>:
void initialize_TIMER0_PWM();
void pulse_out(unsigned char duty_Ratio);
void quick_stop(unsigned char quick_stop, unsigned char duty_Ratio);

int main()
{
  c6:	af 92       	push	r10
  c8:	bf 92       	push	r11
  ca:	cf 92       	push	r12
  cc:	df 92       	push	r13
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
	int number = 0;
	int before = RELEASED;

	

	initialize_PORT();
  da:	0e 94 52 00 	call	0xa4	; 0xa4 <initialize_PORT>
	initialize_TIMER0_PWM();
  de:	0e 94 5a 00 	call	0xb4	; 0xb4 <initialize_TIMER0_PWM>

	PORTB = CCW_ROTATION;
  e2:	80 ea       	ldi	r24, 0xA0	; 160
  e4:	88 bb       	out	0x18, r24	; 24
	unsigned char duty_Ratio = DUTYRATIO_MIN;
	
	unsigned char MAX_MIN = DUTYRATIO_MAX - DUTYRATIO_MIN;

	int number = 0;
	int before = RELEASED;
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	10 e0       	ldi	r17, 0x00	; 0
{
	unsigned char duty_Ratio = DUTYRATIO_MIN;
	
	unsigned char MAX_MIN = DUTYRATIO_MAX - DUTYRATIO_MIN;

	int number = 0;
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	d0 e0       	ldi	r29, 0x00	; 0
		
		if(PIND & (1<<PD7))		//If PD7 SW is pushed  => QUICK_STOP
		{
			number = 0;
			_delay_ms(100);		// SW debouncing delay 0.1seconds
			PORTB = QUICK_STOP;
  ee:	50 e2       	ldi	r21, 0x20	; 32
  f0:	a5 2e       	mov	r10, r21
			duty_Ratio = DUTYRATIO_MAX;
			OCR0 = duty_Ratio;
  f2:	bb 24       	eor	r11, r11
  f4:	ba 94       	dec	r11
			duty_Ratio = (MAX_MIN) * number / 4 + DUTYRATIO_MIN;
			pulse_out(duty_Ratio);
		}
		else if(number % 8 == 5 || number % 8 == 6 || number % 8 == 7)
		{
			duty_Ratio = DUTYRATIO_MAX + MAX_MIN - ((MAX_MIN) * number / 4);
  f6:	4f ee       	ldi	r20, 0xEF	; 239
  f8:	e4 2e       	mov	r14, r20
  fa:	f1 2c       	mov	r15, r1
  fc:	34 e0       	ldi	r19, 0x04	; 4
  fe:	c3 2e       	mov	r12, r19
 100:	d1 2c       	mov	r13, r1

	while(1)
	{
		// QUICK STOP MODE
		
		if(PIND & (1<<PD7))		//If PD7 SW is pushed  => QUICK_STOP
 102:	87 9b       	sbis	0x10, 7	; 16
 104:	16 c0       	rjmp	.+44     	; 0x132 <main+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	91 ee       	ldi	r25, 0xE1	; 225
 10a:	a4 e0       	ldi	r26, 0x04	; 4
 10c:	81 50       	subi	r24, 0x01	; 1
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	a0 40       	sbci	r26, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x46>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x50>
 116:	00 00       	nop
		{
			number = 0;
			_delay_ms(100);		// SW debouncing delay 0.1seconds
			PORTB = QUICK_STOP;
 118:	a8 ba       	out	0x18, r10	; 24
			duty_Ratio = DUTYRATIO_MAX;
			OCR0 = duty_Ratio;
 11a:	b1 be       	out	0x31, r11	; 49
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	91 ee       	ldi	r25, 0xE1	; 225
 120:	a4 e0       	ldi	r26, 0x04	; 4
 122:	81 50       	subi	r24, 0x01	; 1
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	a0 40       	sbci	r26, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x5c>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x66>
 12c:	00 00       	nop
	{
		// QUICK STOP MODE
		
		if(PIND & (1<<PD7))		//If PD7 SW is pushed  => QUICK_STOP
		{
			number = 0;
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	d0 e0       	ldi	r29, 0x00	; 0
		
		
		// SW push -> Remove one's hand


		if(before == RELEASED && (PIND & 1<<PD0))	// If SW mode is Released and PD0 pin is HIGH
 132:	01 15       	cp	r16, r1
 134:	11 05       	cpc	r17, r1
 136:	61 f4       	brne	.+24     	; 0x150 <main+0x8a>
 138:	80 9b       	sbis	0x10, 0	; 16
 13a:	1b c0       	rjmp	.+54     	; 0x172 <main+0xac>
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	91 ee       	ldi	r25, 0xE1	; 225
 140:	a4 e0       	ldi	r26, 0x04	; 4
 142:	81 50       	subi	r24, 0x01	; 1
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	a0 40       	sbci	r26, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x7c>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x86>
 14c:	00 00       	nop
 14e:	0f c0       	rjmp	.+30     	; 0x16e <main+0xa8>
		{
			_delay_ms(100);							// SW debouncing delay 0.1seconds
			before = PRESSED;						// SW mode == PRESSED
		}
		else if(before == PRESSED && !(PIND & 1<<PD0)) // If SW mode is Pressed and PD0 pin is LOW
 150:	80 99       	sbic	0x10, 0	; 16
 152:	0d c0       	rjmp	.+26     	; 0x16e <main+0xa8>
		{
			number++;								// number++
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	91 ee       	ldi	r25, 0xE1	; 225
 15a:	a4 e0       	ldi	r26, 0x04	; 4
 15c:	81 50       	subi	r24, 0x01	; 1
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	a0 40       	sbci	r26, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x96>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xa0>
 166:	00 00       	nop
			_delay_ms(100);
			before = RELEASED;						// SW mode == RELEASED
 168:	00 e0       	ldi	r16, 0x00	; 0
 16a:	10 e0       	ldi	r17, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <main+0xac>
		if(before == RELEASED && (PIND & 1<<PD0))	// If SW mode is Released and PD0 pin is HIGH
		{
			_delay_ms(100);							// SW debouncing delay 0.1seconds
			before = PRESSED;						// SW mode == PRESSED
		}
		else if(before == PRESSED && !(PIND & 1<<PD0)) // If SW mode is Pressed and PD0 pin is LOW
 16e:	01 e0       	ldi	r16, 0x01	; 1
 170:	10 e0       	ldi	r17, 0x00	; 0
	

		// MOTOR_DRIVEN through number


		if(number % 8 == 1 || number % 8 == 2 || number % 8 == 3 || number % 8 == 4)
 172:	ce 01       	movw	r24, r28
 174:	87 70       	andi	r24, 0x07	; 7
 176:	90 70       	andi	r25, 0x00	; 0
 178:	9c 01       	movw	r18, r24
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	30 40       	sbci	r19, 0x00	; 0
 17e:	24 30       	cpi	r18, 0x04	; 4
 180:	31 05       	cpc	r19, r1
 182:	68 f4       	brcc	.+26     	; 0x19e <main+0xd8>
		{
			duty_Ratio = (MAX_MIN) * number / 4 + DUTYRATIO_MIN;
 184:	ce 9d       	mul	r28, r14
 186:	c0 01       	movw	r24, r0
 188:	cf 9d       	mul	r28, r15
 18a:	90 0d       	add	r25, r0
 18c:	de 9d       	mul	r29, r14
 18e:	90 0d       	add	r25, r0
 190:	11 24       	eor	r1, r1
 192:	95 95       	asr	r25
 194:	87 95       	ror	r24
 196:	95 95       	asr	r25
 198:	87 95       	ror	r24
			pulse_out(duty_Ratio);
 19a:	80 5f       	subi	r24, 0xF0	; 240
 19c:	15 c0       	rjmp	.+42     	; 0x1c8 <main+0x102>
		}
		else if(number % 8 == 5 || number % 8 == 6 || number % 8 == 7)
 19e:	9c 01       	movw	r18, r24
 1a0:	25 50       	subi	r18, 0x05	; 5
 1a2:	30 40       	sbci	r19, 0x00	; 0
 1a4:	23 30       	cpi	r18, 0x03	; 3
 1a6:	31 05       	cpc	r19, r1
 1a8:	90 f4       	brcc	.+36     	; 0x1ce <main+0x108>
		{
			duty_Ratio = DUTYRATIO_MAX + MAX_MIN - ((MAX_MIN) * number / 4);
 1aa:	ce 9d       	mul	r28, r14
 1ac:	c0 01       	movw	r24, r0
 1ae:	cf 9d       	mul	r28, r15
 1b0:	90 0d       	add	r25, r0
 1b2:	de 9d       	mul	r29, r14
 1b4:	90 0d       	add	r25, r0
 1b6:	11 24       	eor	r1, r1
 1b8:	b6 01       	movw	r22, r12
 1ba:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__divmodhi4>
 1be:	70 95       	com	r23
 1c0:	61 95       	neg	r22
 1c2:	7f 4f       	sbci	r23, 0xFF	; 255
			pulse_out(duty_Ratio);
 1c4:	86 2f       	mov	r24, r22
 1c6:	82 51       	subi	r24, 0x12	; 18
 1c8:	0e 94 5e 00 	call	0xbc	; 0xbc <pulse_out>
 1cc:	9a cf       	rjmp	.-204    	; 0x102 <main+0x3c>
		}
		else if(number % 8 == 0)
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <main+0x10e>
 1d2:	97 cf       	rjmp	.-210    	; 0x102 <main+0x3c>
		{
			number = 0;
			duty_Ratio = DUTYRATIO_MIN;
			pulse_out(duty_Ratio);
 1d4:	80 e1       	ldi	r24, 0x10	; 16
 1d6:	0e 94 5e 00 	call	0xbc	; 0xbc <pulse_out>
			duty_Ratio = DUTYRATIO_MAX + MAX_MIN - ((MAX_MIN) * number / 4);
			pulse_out(duty_Ratio);
		}
		else if(number % 8 == 0)
		{
			number = 0;
 1da:	c0 e0       	ldi	r28, 0x00	; 0
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
 1de:	91 cf       	rjmp	.-222    	; 0x102 <main+0x3c>

000001e0 <__divmodhi4>:
 1e0:	97 fb       	bst	r25, 7
 1e2:	09 2e       	mov	r0, r25
 1e4:	07 26       	eor	r0, r23
 1e6:	0a d0       	rcall	.+20     	; 0x1fc <__divmodhi4_neg1>
 1e8:	77 fd       	sbrc	r23, 7
 1ea:	04 d0       	rcall	.+8      	; 0x1f4 <__divmodhi4_neg2>
 1ec:	0c d0       	rcall	.+24     	; 0x206 <__udivmodhi4>
 1ee:	06 d0       	rcall	.+12     	; 0x1fc <__divmodhi4_neg1>
 1f0:	00 20       	and	r0, r0
 1f2:	1a f4       	brpl	.+6      	; 0x1fa <__divmodhi4_exit>

000001f4 <__divmodhi4_neg2>:
 1f4:	70 95       	com	r23
 1f6:	61 95       	neg	r22
 1f8:	7f 4f       	sbci	r23, 0xFF	; 255

000001fa <__divmodhi4_exit>:
 1fa:	08 95       	ret

000001fc <__divmodhi4_neg1>:
 1fc:	f6 f7       	brtc	.-4      	; 0x1fa <__divmodhi4_exit>
 1fe:	90 95       	com	r25
 200:	81 95       	neg	r24
 202:	9f 4f       	sbci	r25, 0xFF	; 255
 204:	08 95       	ret

00000206 <__udivmodhi4>:
 206:	aa 1b       	sub	r26, r26
 208:	bb 1b       	sub	r27, r27
 20a:	51 e1       	ldi	r21, 0x11	; 17
 20c:	07 c0       	rjmp	.+14     	; 0x21c <__udivmodhi4_ep>

0000020e <__udivmodhi4_loop>:
 20e:	aa 1f       	adc	r26, r26
 210:	bb 1f       	adc	r27, r27
 212:	a6 17       	cp	r26, r22
 214:	b7 07       	cpc	r27, r23
 216:	10 f0       	brcs	.+4      	; 0x21c <__udivmodhi4_ep>
 218:	a6 1b       	sub	r26, r22
 21a:	b7 0b       	sbc	r27, r23

0000021c <__udivmodhi4_ep>:
 21c:	88 1f       	adc	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	5a 95       	dec	r21
 222:	a9 f7       	brne	.-22     	; 0x20e <__udivmodhi4_loop>
 224:	80 95       	com	r24
 226:	90 95       	com	r25
 228:	bc 01       	movw	r22, r24
 22a:	cd 01       	movw	r24, r26
 22c:	08 95       	ret

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
